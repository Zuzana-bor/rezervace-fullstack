import express from 'express';
import { requireAuth } from '../middleware/auth';
import { Appointment } from '../models/Appointments';
import { Service } from '../models/Service';
import { BlockedTime } from '../models/BlockedTime';

const router = express.Router();

// Endpoint pro z√≠sk√°n√≠ v≈°ech rezervac√≠ - upraven pro admin
router.get('/', requireAuth, async (req, res) => {
  try {
    console.log('üîç Endpoint / volan√Ω, user role:', req.user?.role);

    let appointments;

    if (req.user?.role === 'admin') {
      // Admin vid√≠ v≈°echny rezervace s populovan√Ωmi √∫daji
      appointments = await Appointment.find()
        .populate('userId', 'firstName lastName email phone')
        .sort({ date: 1 });
      console.log('üìã Admin - nalezeno v≈°ech rezervac√≠:', appointments.length);
    } else {
      // U≈æivatel vid√≠ jen sv√© rezervace
      appointments = await Appointment.find({ userId: req.user?.id })
        .populate('userId', 'firstName lastName email')
        .sort({ date: 1 });
      console.log('üìã User - nalezeno rezervac√≠:', appointments.length);
    }

    res.status(200).json(appointments);
  } catch (err) {
    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ rezervac√≠:', err);
    res.status(500).json({ message: 'Chyba p≈ôi naƒç√≠t√°n√≠ rezervac√≠' });
  }
});

// Upravit st√°vaj√≠c√≠ endpoint aby podporoval admin dotazy
router.get('/me', requireAuth, async (req, res) => {
  try {
    const userId = req.user?.id;
    const userRole = req.user?.role;
    const targetUserId = req.query.userId as string; // Admin m≈Ø≈æe specifikovat userId

    let queryUserId = userId; // Default: vlastn√≠ rezervace

    // Pokud je admin a specifikuje userId, naƒçte rezervace toho u≈æivatele
    if (userRole === 'admin' && targetUserId) {
      queryUserId = targetUserId;
      console.log('üîç Admin naƒç√≠t√° rezervace pro userId:', targetUserId);
    } else {
      console.log('üë§ U≈æivatel naƒç√≠t√° sv√© rezervace:', userId);
    }

    const appointments = await Appointment.find({ userId: queryUserId })
      .populate('userId', 'firstName lastName email phone')
      .sort({ date: 1 });

    console.log('üìã Nalezeno rezervac√≠:', appointments.length);
    res.status(200).json(appointments);
  } catch (err) {
    console.error('Chyba p≈ôi naƒç√≠t√°n√≠ rezervac√≠:', err);
    res.status(500).json({ message: 'Chyba p≈ôi naƒç√≠t√°n√≠ rezervac√≠' });
  }
});

// CHYBƒöJ√çC√ç DELETE endpoint
router.delete('/:id', requireAuth, async (req, res) => {
  try {
    const appointmentId = req.params.id;
    const userId = req.user?.id;
    const userRole = req.user?.role;

    console.log('üóëÔ∏è Maz√°n√≠ rezervace:', appointmentId, 'user role:', userRole);

    // Najdi rezervaci
    const appointment = await Appointment.findById(appointmentId);
    if (!appointment) {
      return res.status(404).json({ message: 'Rezervace nenalezena' });
    }

    // Kontrola opr√°vnƒõn√≠ - admin m≈Ø≈æe mazat v≈°echny, u≈æivatel jen sv√©
    if (userRole !== 'admin' && appointment.userId?.toString() !== userId) {
      return res
        .status(403)
        .json({ message: 'Nem√°te opr√°vnƒõn√≠ smazat tuto rezervaci' });
    }

    await Appointment.findByIdAndDelete(appointmentId);
    console.log('‚úÖ Rezervace smaz√°na:', appointmentId);

    res.status(200).json({ message: 'Rezervace byla √∫spƒõ≈°nƒõ smaz√°na' });
  } catch (err) {
    console.error('‚ùå Chyba p≈ôi maz√°n√≠ rezervace:', err);
    res.status(500).json({
      message: 'Chyba p≈ôi maz√°n√≠ rezervace',
      error: err instanceof Error ? err.message : String(err),
    });
  }
});

// Vytvo≈ôen√≠ nov√© rezervace s blokac√≠ podle d√©lky slu≈æby
router.post('/me', requireAuth, async (req, res) => {
  const { date, service } = req.body;
  const userId = req.user?.id;

  try {
    if (!date || !service || !userId) {
      return res.status(400).json({
        message: 'Chyb√≠ povinn√© √∫daje (datum, slu≈æba nebo u≈æivatel)',
      });
    }

    const start = new Date(date);

    // Kontrola, zda u≈æ existuje rezervace ve stejn√Ω ƒças
    const existingAppointment = await Appointment.findOne({
      date: {
        $gte: new Date(start.getTime() - 30 * 60000), // 30 minut p≈ôed
        $lt: new Date(start.getTime() + 30 * 60000), // 30 minut po
      },
    });

    if (existingAppointment) {
      return res.status(409).json({
        message: 'Tento term√≠n je ji≈æ obsazen√Ω. Pros√≠m vyberte jin√Ω ƒças.',
      });
    }

    // Kontrola blokovan√Ωch ƒças≈Ø
    const blockedTime = await BlockedTime.findOne({
      date: {
        $gte: new Date(start.getTime() - 30 * 60000),
        $lt: new Date(start.getTime() + 30 * 60000),
      },
    });

    if (blockedTime) {
      return res.status(409).json({
        message: 'V tomto term√≠nu nepracujem. Pros√≠m vyberte jin√Ω ƒças.',
      });
    }

    // Najdi slu≈æbu podle ID a z√≠skej cenu a d√©lku
    const foundService = await Service.findById(service);
    if (!foundService) {
      return res.status(400).json({ message: 'Slu≈æba nenalezena' });
    }
    const price = foundService.price;
    const duration = foundService.duration;
    // Only add Czech timezone offset (+02:00) if no timezone is specified
    // This prevents double-adding when frontend already includes timezone
    // Check for timezone info only after the time part (after 'T')
    const timePartIndex = date.indexOf('T');
    const hasTimezone = timePartIndex !== -1 && (
      date.slice(timePartIndex).includes('+') || 
      date.slice(timePartIndex).includes('Z') || 
      date.slice(timePartIndex).includes('-')
    );
    const dateString = hasTimezone ? date : date + '+02:00';
    const appointmentStart = new Date(dateString);
    const appointmentEnd = new Date(
      appointmentStart.getTime() + duration * 60000,
    );
    // Zkontroluj kolize s existuj√≠c√≠mi rezervacemi
    const conflict = await Appointment.findOne({
      $or: [
        // Nov√Ω zaƒç√°tek spad√° do existuj√≠c√≠ rezervace
        {
          date: { $lt: appointmentEnd },
          $expr: {
            $gt: [
              { $add: ['$date', { $multiply: ['$duration', 60000] }] },
              appointmentStart,
            ],
          },
        },
        // Nov√Ω konec spad√° do existuj√≠c√≠ rezervace
        {
          date: { $lt: appointmentEnd },
          $expr: {
            $gt: [
              { $add: ['$date', { $multiply: ['$duration', 60000] }] },
              appointmentStart,
            ],
          },
        },
        // Nov√° rezervace zcela p≈ôekr√Ωv√° existuj√≠c√≠
        { date: { $gte: appointmentStart, $lt: appointmentEnd } },
      ],
    });
    if (conflict) {
      return res.status(409).json({ message: 'Tento term√≠n je ji≈æ obsazen√Ω.' });
    }
    // Zkontroluj kolize s blokovan√Ωmi ƒçasy
    const blocked = await BlockedTime.findOne({
      $or: [
        // P≈ôekryv s blokovan√Ωm intervalem
        { start: { $lt: appointmentEnd }, end: { $gt: appointmentStart } },
        // Blokace na cel√Ω den
        {
          allDay: true,
          start: { $lte: appointmentStart },
          end: { $gte: appointmentEnd },
        },
        // Blokace na cel√Ω den pro v√≠kend
      ],
    });
    // Zablokuj v≈°echny soboty a nedƒõle
    const isWeekend =
      appointmentStart.getDay() === 0 || appointmentStart.getDay() === 6;
    if (blocked || isWeekend) {
      return res.status(409).json({ message: 'Tento term√≠n je blokovan√Ω.' });
    }
    const appointment = new Appointment({
      date: appointmentStart,
      service: foundService.name,
      price,
      userId,
      duration,
    });
    const saved = await appointment.save();
    res.status(201).json(saved);
  } catch (err) {
    console.error('Chyba p≈ôi vytv√°≈ôen√≠ rezervace:', err);
    res.status(500).json({
      message: 'Chyba p≈ôi vytv√°≈ôen√≠ rezervace',
      error: err instanceof Error ? err.message : String(err),
    });
  }
});

export default router;
